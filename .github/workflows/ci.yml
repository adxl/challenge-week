name: BBR CI Workflow

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - ci/setup

jobs:
  install:
    name: Install and test the application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup
        run: |
          cp ./api/.env.ci ./api/.env
          echo "VITE_API_URL=localhost" > ./client/.env

          sed -i 's|@JWT_SECRET_KEY@|${{ secrets.JWT_SECRET_KEY }}|g' ./api/.env
          sed -i 's|@JWT_PUBLIC_KEY@|${{ secrets.JWT_PUBLIC_KEY }}|g' ./api/.env
          sed -i 's|@JWT_PASSPHRASE@|${{ secrets.JWT_PASSPHRASE }}|g' ./api/.env

      - name: Start services
        run: docker compose up --build -d

      - name: Check reachability
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker compose ps
                docker compose logs
                exit 1
              ;;
            esac
          done
          exit 1

          curl -v -o /dev/null http://localhost

      - name: Generate JWT RSA Keys
        run : docker compose exec -T php bin/console lexik:jwt:generate-keypair

      - name: Setup database
        run: |
          docker compose exec -T php bin/console -e test doctrine:database:create
          docker compose exec -T php bin/console -e test doctrine:schema:create
          docker compose exec -T php bin/console -e test doctrine:fixtures:load -n
          docker compose exec -T php bin/console doctrine:schema:validate --skip-sync

      - name: Run tests
        run: docker compose exec -T php bin/phpunit

        
  publish:
    needs: install

    name: Build and publish the image
    runs-on: ubuntu-latest
    
    if: github.ref_name == 'main'
  
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup
        run: cp ./api/.env.ci ./api/.env

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        if: github

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_TOKEN }}

      - name: Publish
        uses: docker/build-push-action@v3
        with:
          context: ./api
          push: true
          tags: ${{ secrets.HUB_USERNAME }}/challenge-week:latest
